name: Build KSU as LKM
on:
  workflow_dispatch:
    inputs:
      TAG:
        required: true
        default: "android14-6.1-2023-06"

jobs:
  build:
    name: Build ${{ github.event.inputs.TAG }}
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_MAXSIZE: "2G"
      CCACHE_HARDLINK: "true"
    steps:
    - name: Maximize Build Space
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 8192
        root-reserve-mb: 8192
        temp-reserve-mb: 2048
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'

    - name: Download Kernel Source
      run: |
        sudo apt-get remove firefox -y
        sudo apt-get update
        sudo apt-get upgrade -y
        sudo apt-get install repo -y
        echo "Free space:"
        df -h
        cd $GITHUB_WORKSPACE
        git config --global user.name "YuKongA"
        git config --global user.email 70465933+YuKongA@users.noreply.github.com
        mkdir android-kernel && cd android-kernel
        repo init --depth=1 --u https://android.googlesource.com/kernel/manifest -b common-${{ github.event.inputs.TAG }} --repo-rev=v2.16
        REMOTE_BRANCH=$(git ls-remote https://android.googlesource.com/kernel/common ${{ github.event.inputs.TAG }})
        DEFAULT_MANIFEST_PATH=.repo/manifests/default.xml
        if grep -q deprecated <<< $REMOTE_BRANCH; then
          echo "Found deprecated branch: ${{ github.event.inputs.TAG }}"
          sed -i 's/"${{ github.event.inputs.TAG }}"/"deprecated\/${{ github.event.inputs.TAG }}"/g' $DEFAULT_MANIFEST_PATH
        fi
        repo --trace sync -q -c -j$(nproc --all) --no-tags
        df -h

    - name: Setup KernelSU
      run: |
        cd $GITHUB_WORKSPACE
        git clone https://github.com/tiann/KernelSU.git
        cd $GITHUB_WORKSPACE/android-kernel
        echo "[+] KernelSU setup"
        GKI_ROOT=$(pwd)
        echo "[+] GKI_ROOT: $GKI_ROOT"
        echo "[+] Copy KernelSU driver to $GKI_ROOT/common/drivers"
        ln -sf $GITHUB_WORKSPACE/KernelSU/kernel $GKI_ROOT/common/drivers/kernelsu
        echo "[+] Add KernelSU driver to Makefile"
        DRIVER_MAKEFILE=$GKI_ROOT/common/drivers/Makefile
        grep -q "kernelsu" $DRIVER_MAKEFILE || echo "obj-m += kernelsu/" >> $DRIVER_MAKEFILE
        echo "[+] KernelSU setup done."

    - name: Symbol Magic
      run: |
        echo "[+] Export all symbol from abi_gki_aarch64.xml"
        COMMON_ROOT=$GITHUB_WORKSPACE/android-kernel/common
        KSU_ROOT=$GITHUB_WORKSPACE/KernelSU
        ABI_XML=$COMMON_ROOT/android/abi_gki_aarch64.xml
        SYMBOL_LIST=$COMMON_ROOT/android/abi_gki_aarch64
        # python3 $KSU_ROOT/scripts/abi_gki_all.py $ABI_XML > $SYMBOL_LIST
        echo "[+] Add KernelSU symbols"
        cat $KSU_ROOT/kernel/export_symbol.txt | awk '{sub("[ \t]+","");print "  "$0}' >> $SYMBOL_LIST

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: gki-kernel-aarch64-${{ github.event.inputs.TAG }}
        max-size: 2G

    - name: Setup for LKM
      working-directory: android-kernel
      run: |
        pip install ast-grep-cli
        sudo apt-get install llvm-15 -y
        ast-grep -U -p '$$$ check_exports($$$) {$$$}' -r '' common/scripts/mod/modpost.c
        ast-grep -U -p 'check_exports($$$);' -r '' common/scripts/mod/modpost.c
        sed -i '1i KSU_MODULE := 1' $GITHUB_WORKSPACE/KernelSU/kernel/Makefile
        echo "drivers/kernelsu/kernelsu.ko" >> common/android/gki_aarch64_modules
        if [ ! -e build/build.sh ]; then
          sed -i 's/needs unknown symbol/Dont abort when unknown symbol/g' build/kernel/*.sh || echo "No unknown symbol scripts found"
          if [ -e common/modules.bzl ]; then
            sed -i 's/_COMMON_GKI_MODULES_LIST = \[/_COMMON_GKI_MODULES_LIST = \[ "drivers\/kernelsu\/kernelsu.ko",/g' common/modules.bzl
          fi
        else
          TARGET_FILE="build/kernel/build.sh"
          if [ ! -e "$TARGET_FILE" ]; then
            TARGET_FILE="build/build.sh"
          fi
          sed -i 's/needs unknown symbol/Dont abort when unknown symbol/g' $TARGET_FILE || echo "No unknown symbol in $TARGET_FILE"
          sed -i 's/if ! diff -u "\${KERNEL_DIR}\/\${MODULES_ORDER}" "\${OUT_DIR}\/modules\.order"; then/if false; then/g' $TARGET_FILE
          sed -i 's@${ROOT_DIR}/build/abi/compare_to_symbol_list@echo@g' $TARGET_FILE
          sed -i 's/needs unknown symbol/Dont abort when unknown symbol/g' build/kernel/*.sh || echo "No unknown symbol scripts found"
        fi

    - name: Remove protected symbols
      working-directory: android-kernel
      run: rm common/android/abi_gki_protected_exports_* || echo "No protected exports!"

    - name: Make working directory clean to avoid dirty
      working-directory: android-kernel
      run: cd common/ && git add -A && git commit -a -m "Add KernelSU"

    - name: Build LKM
      working-directory: android-kernel
      run: |
        if [ -e build/build.sh ]; then
          LTO=thin BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh CC="/usr/bin/ccache clang" || echo "COMPILE_KERNEL=false" >>$GITHUB_ENV
        else
          tools/bazel run --cache_dir=/home/runner/.cache/bazel --config=fast --config=stamp --lto=thin //common:kernel_aarch64_dist -- --dist_dir=dist || echo "COMPILE_KERNEL=false" >>$GITHUB_ENV
        fi
        du -sh /home/runner/.cache/bazel

    - name: Prepare artifacts
      run: |
        mkdir output
        if [ ${{ env.COMPILE_KERNEL }} = "false" ]; then
          sudo apt-get install fd-find -y
          fdfind -e ko kernelsu -x cp -f {} ./output/
        else
          OUTDIR=android-kernel/out/*/dist
          if [ ! -e $OUTDIR ]; then
            OUTDIR=android-kernel/dist
          fi
          cp $OUTDIR/kernelsu.ko ./output/
        fi
        llvm-strip-15 -d ./output/kernelsu.ko

    - name: Upload LKM
      uses: actions/upload-artifact@v4
      with:
        name: LKM_KernelSU_${{ github.event.inputs.TAG }}
        path: ./output/kernelsu.ko
